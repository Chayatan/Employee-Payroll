/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package employee.payroll;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.*;
import net.proteanit.sql.DbUtils;
import java.awt.Dimension;
import java.awt.List;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

/**
 *
 * @author chayatan
 */
public class DayTransaction extends javax.swing.JFrame {
    
    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    String accID = "";
    public static int count;
    String date=Transaction.selectedDate;
    float total_receipts=0;
    float total_payments=0;
    float cashOnHand=0;
    Transaction myTransaction = new Transaction();
    public static int number_of_transactions;
               
    /**
     * Creates new form DayTransaction
     */
    public DayTransaction() {
        initComponents();
        
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2, size.height / 2 - getHeight() / 2);

        conn = db.java_db();
        updateTable();
    }
    
    public void updateTable() {
                
        try {
            System.out.println("updating..");
            System.out.println(date);
            lbl_date.setText(date);
            String sql = "select * from daytrans where trans_date=?";
            pst = conn.prepareStatement(sql);
            pst.setString(1, date);
            rs = pst.executeQuery();
            
            ArrayList Account_Head = new ArrayList();
            ArrayList Receipt = new ArrayList();
            ArrayList Payment = new ArrayList();
            
            DefaultTableModel model = (DefaultTableModel) table_daytransaction.getModel();
            
            while(rs.next()){
                Account_Head.add(rs.getString("Account_Head"));//add items to array list
                Receipt.add(rs.getString("Receipt"));
                Payment.add(rs.getString("Payment"));
                total_receipts = total_receipts + rs.getFloat("Receipt");
                total_payments = total_payments + rs.getFloat("Payment");
            }
            
            cashOnHand = Float.valueOf(myTransaction.cashOnHand);// + total_receipts-total_payments;
            lbl_cashOnHand.setText(String.valueOf(cashOnHand));//convert float to string
            count=Account_Head.size();
            // populate data on the table
            int i = model.getColumnCount();
            for (int k = 0; k < i; k++){ //k number of columns and j is number of rows
                for( int j = 0; j < Account_Head.size(); j++ ){
                    if(k==0){
                        model.setRowCount(model.getRowCount()+1);//set the rowcount of table default is 0
                        table_daytransaction.setValueAt(Account_Head.get(j), j, k);
                    }
                    else if(k==1){
                        table_daytransaction.setValueAt(Receipt.get(j), j, k);
                    }
                    else if(k==2){
                        table_daytransaction.setValueAt(Payment.get(j), j, k);
                    }
                    else
                        System.out.println("write proper code k is big: "+k);
                    
                }
                
            }
            number_of_transactions=Account_Head.size();
            System.out.println(number_of_transactions);
            
        }catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }finally{
            try{
                rs.close();
                pst.close();
            }catch(Exception e){
                e.printStackTrace();
            }
        }

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialog_acclist = new javax.swing.JDialog();
        jScrollPane4 = new javax.swing.JScrollPane();
        lst_acchead = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_daytransaction = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        lbl_date = new javax.swing.JLabel();
        save_to_db = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lbl_cashOnHand = new javax.swing.JLabel();

        dialog_acclist.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dialog_acclistKeyPressed(evt);
            }
        });

        lst_acchead.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lst_accheadKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(lst_acchead);

        javax.swing.GroupLayout dialog_acclistLayout = new javax.swing.GroupLayout(dialog_acclist.getContentPane());
        dialog_acclist.getContentPane().setLayout(dialog_acclistLayout);
        dialog_acclistLayout.setHorizontalGroup(
            dialog_acclistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialog_acclistLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                .addContainerGap())
        );
        dialog_acclistLayout.setVerticalGroup(
            dialog_acclistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table_daytransaction.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Account Head", "Receipt", "Payment"
            }
        ));
        table_daytransaction.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                table_daytransactionKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(table_daytransaction);

        jLabel1.setText("Narration :");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jLabel2.setText("Date :");

        save_to_db.setText("Save");
        save_to_db.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_to_dbActionPerformed(evt);
            }
        });

        jLabel3.setText("Cash on hand:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(115, 115, 115)
                                        .addComponent(save_to_db)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_date, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_cashOnHand, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(lbl_cashOnHand, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(lbl_date, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(save_to_db)
                        .addGap(28, 28, 28))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void table_daytransactionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_table_daytransactionKeyPressed
        // TODO add your handling code here:
        try
        {
            if (evt.getKeyCode() == KeyEvent.VK_ESCAPE ) {
                count=0;
                conn.close();
//                Transaction m = new Transaction();
                myTransaction = new Transaction();
                myTransaction.setVisible(true);
                this.dispose();
            }
        
            if (KeyEvent.VK_ENTER == evt.getKeyCode()) {
                
            }
            
            if (KeyEvent.VK_DOWN == evt.getKeyCode()) {
                dialog_acclist.setSize(140, 200);
                final Toolkit toolkit = Toolkit.getDefaultToolkit();
                final Dimension screenSize = toolkit.getScreenSize();
                final int x = (screenSize.width - dialog_acclist.getWidth()) / 2;
                final int y = (screenSize.height - dialog_acclist.getHeight()) / 2;
                dialog_acclist.setLocation(x, y);
                dialog_acclist.setVisible(true);
                getAccHeadNames();
                
            }
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_table_daytransactionKeyPressed
    
    public void getAccHeadNames(){
        try {

            String sql = "select Account_Head from acc_heads";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            ArrayList names = new ArrayList();
            
            while(rs.next()){
                String tmp=rs.getString("Account_Head");
                names.add(tmp);//add items to array list
            }
            
            String[] tmp = new String[names.size()];
            // convert arraylist data to string array
            for( int j = 0; j < names.size(); j++ ){
                tmp[j]=names.get(j).toString();
            }
            lst_acchead.setListData(tmp);
            //table_daytransaction.setModel(DbUtils.resultSetToTableModel(rs));
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void dialog_acclistKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dialog_acclistKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE ) {
                DayTransaction m = new DayTransaction();
                m.setVisible(true);
                this.dispose();
        }
    }//GEN-LAST:event_dialog_acclistKeyPressed

    private void lst_accheadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lst_accheadKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER ) {
            
            String accHeadName=lst_acchead.getSelectedValue();
            if (accHeadName != null){
                System.out.println(accHeadName + table_daytransaction.getRowCount());
            
                DefaultTableModel model = (DefaultTableModel) table_daytransaction.getModel();
                //count=getCountValue();
                model.setRowCount(model.getRowCount()+1);//set the rowcount of table default is 0
                int i = model.getColumnCount();
                for (int j=0; j<i;j++){
                    if (j==0)
                        model.setValueAt(accHeadName, count, 0);
                    else
                        model.setValueAt("0", count, j);
                }
            
                count = count+1;
                dialog_acclist.setVisible(false);
        
            }
        }
        
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE ) {
            dialog_acclist.dispatchEvent(new WindowEvent(
            dialog_acclist, WindowEvent.WINDOW_CLOSING));
        }
    }//GEN-LAST:event_lst_accheadKeyPressed

    private void save_to_dbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_to_dbActionPerformed
        // TODO add your handling code here:
        updateDB();
    }//GEN-LAST:event_save_to_dbActionPerformed
    
    public void updateDB(){
        try{
            int rows = table_daytransaction.getRowCount();
            float total_receipt=0, total_payment=0;
            System.out.println(rows + "no.trans" + number_of_transactions);
            String sql="insert into daytrans (trans_date, Account_Head, Receipt, Payment, tot_receipt, tot_payment) values (?, ?, ?, ?, ?, ?)";
            pst = conn.prepareStatement(sql);
            //update db from this transaction number to end of the transactions
            
            for(int i=number_of_transactions; i<table_daytransaction.getRowCount(); i++){
                String Account_Head=table_daytransaction.getValueAt(i, 0).toString();
                String Receipt=table_daytransaction.getValueAt(i, 1).toString();
                String Payment=table_daytransaction.getValueAt(i, 2).toString();
                System.out.println(Account_Head+Receipt+Payment);
                
                total_receipt=total_receipt+Float.valueOf(Receipt);
                total_payment=total_payment+Float.valueOf(Payment);
                //String date = Transaction.selectedDate;
                
                pst.setString(1, date);
                pst.setString(2, Account_Head);
                pst.setString(3, Receipt);
                pst.setString(4, Payment);
                pst.setString(5, String.valueOf(total_receipt));
                pst.setString(6, String.valueOf(total_payment));
                pst.executeUpdate();
                }
            lbl_cashOnHand.setText(String.valueOf(Float.valueOf(myTransaction.cashOnHand) + total_receipt-total_payment));//display balance
            
            pst.close();
            // update total receipts payments and balance onto trans table
            sql = "update trans set Receipt=?, Payment=?, Balance=? where trans_date=?";
            pst = conn.prepareStatement(sql);
            
            //old receipts and payments
            float prev_receipt=0, prev_payment=0;
            if (number_of_transactions>0){
                for (int i=0;i<number_of_transactions;i++){
                    System.out.println("inside for");
                    String Receipt=table_daytransaction.getValueAt(i, 1).toString();
                    String Payment=table_daytransaction.getValueAt(i, 2).toString();
                    System.out.println(Receipt + Payment);
                    
                    prev_receipt=prev_receipt+Float.valueOf(Receipt);
                    prev_payment=prev_payment+Float.valueOf(Payment);
                    System.out.println(prev_receipt + prev_payment);
                }
            }
            System.out.format("total receipt: %f total receipt_pre: %f",total_receipt,prev_receipt);
            pst.setString(1, String.valueOf(total_receipt+prev_receipt));
            pst.setString(2, String.valueOf(total_payment+prev_payment));
            pst.setString(3, String.valueOf(Float.valueOf(myTransaction.cashOnHand) + total_receipt-total_payment));
            pst.setString(4, date);
            pst.executeUpdate();
            System.out.println("total bal: "+(Float.valueOf(myTransaction.cashOnHand) + total_receipt-total_payment));
            JOptionPane.showMessageDialog(null, "Suceesfully updated db");
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DayTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DayTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DayTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DayTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DayTransaction().setVisible(true);
            }
        });
        
        System.out.println("hello");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog dialog_acclist;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lbl_cashOnHand;
    private javax.swing.JLabel lbl_date;
    private javax.swing.JList<String> lst_acchead;
    private javax.swing.JButton save_to_db;
    private javax.swing.JTable table_daytransaction;
    // End of variables declaration//GEN-END:variables
}
