/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package employee.payroll;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.*;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
/**
 *
 * @author chayatan
 */
public class Transaction extends javax.swing.JFrame {
    
    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    String accID = "";
    public static String selectedDate;
    String newDateString = null;
    public static String cashOnHand="0";
    
    /**
     * Creates new form Transaction
     */
    public Transaction() {
        initComponents();
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2, size.height / 2 - getHeight() / 2);

        conn = db.java_db();
        updateTable();
        updateBalance();
    }
    
    public void updateTable() {
        
        try {
            System.out.println("updating..");
            String sql = "select * from trans";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            
            ArrayList trans_date = new ArrayList();
            ArrayList Receipt = new ArrayList();
            ArrayList Payment = new ArrayList();
            ArrayList Balance = new ArrayList();
            
            DefaultTableModel model = (DefaultTableModel) table_transaction.getModel();
            
            while(rs.next()){
                trans_date.add(rs.getString("trans_date"));//add items to array list
                Receipt.add(rs.getString("Receipt"));
                Payment.add(rs.getString("Payment"));
                Balance.add(rs.getString("Balance"));
                
            }
           
            if (trans_date.isEmpty()){
                System.out.println("transaction size =: "+trans_date.size());
                return;
            }
            // populate data on the table
            int i = model.getColumnCount();
            
            for (int k = 0; k < i; k++){
                for( int j = 0; j < trans_date.size(); j++ ){
                    if(k==0){
                        model.setRowCount(model.getRowCount()+1);//rowcount of table, default is set to 0
                        table_transaction.setValueAt(trans_date.get(j), j, k);
                    }
                    else if(k==1){
                        table_transaction.setValueAt(Receipt.get(j), j, k);
                    }
                    else if(k==2){
                        table_transaction.setValueAt(Payment.get(j), j, k);
                    }
                    else if(k==3){
                        table_transaction.setValueAt(Balance.get(j), j, k);
                    }
                    else{
                        System.out.println("write proper code k gkhk is big: "+k);}
                    
                }
                
            }
            
        }catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }finally{
            try{
                rs.close();
                pst.close();
            }catch(Exception e){
                e.printStackTrace();
            }
        }

    }
    
    public void updateBalance(){
        String sql = "select * from trans";
        try{
            ArrayList Balance = new ArrayList();
            
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            
            while(rs.next()){
                Balance.add(rs.getString("Balance"));//add items to array list
            }
            
            if (Balance.size()>0){
                cashOnHand=Balance.get(Balance.size()-1).toString();
                System.out.println("last item in balance is : " + cashOnHand);
                lbl_cashOnHand.setText(cashOnHand);
            }
            else{
                    lbl_cashOnHand.setText("0");
            }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table_transaction = new javax.swing.JTable();
        lbl_cashOnHand = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table_transaction.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Receipt", "Payment", "Balance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_transaction.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                table_transactionKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(table_transaction);
        TableCellRenderer rendererFromHeader = table_transaction.getTableHeader().getDefaultRenderer();
        JLabel headerLabel = (JLabel) rendererFromHeader;
        headerLabel.setHorizontalAlignment(JLabel.CENTER);

        lbl_cashOnHand.setText("cash");

        jLabel1.setText("Cash on Hand: ");

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jMenuItem1.setText("New Entry");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_cashOnHand)
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_cashOnHand)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void table_transactionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_table_transactionKeyPressed
        // TODO add your handling code here:
        try
        {
            if (evt.getKeyCode() == KeyEvent.VK_ESCAPE ) {
                System.out.println("pressed ESC");
                conn.close();
                MainMenu m = new MainMenu();
                m.setVisible(true);
                this.dispose();
                
            }
        
            if (KeyEvent.VK_ENTER == evt.getKeyCode()) {
                int index = table_transaction.getSelectedRow();
                TableModel model = table_transaction.getModel();
                selectedDate = model.getValueAt(index, 0).toString();
                System.out.println(selectedDate + index);
                conn.close();
                DayTransaction m = new DayTransaction();
                m.setVisible(true);
                this.dispose();
            }
            
        }catch(Exception e){
            
        }
               
        
    }//GEN-LAST:event_table_transactionKeyPressed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        addDate();
         
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
    public String addDate(){
        DefaultTableModel model = (DefaultTableModel) table_transaction.getModel();
        int index=table_transaction.getRowCount();
        String latestDate = "2016-12-31";
        if (index!=0){
            latestDate = model.getValueAt(index-1, 0).toString();
        }
        
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        Date newDate;
        try {
            
            newDate = df.parse(latestDate);
            newDateString = df.format(newDate);
            
            newDateString = LocalDate.parse(newDateString).plusDays(1).toString();
            model.setRowCount(model.getRowCount()+1);
            model.setValueAt(newDateString, index, 0);
            model.setValueAt(cashOnHand, index, 3);
            updateDB();
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return newDateString;
    }
    public void updateDB(){
        try{
            int rows = table_transaction.getRowCount();
            System.out.println(rows);
            String sql="insert into trans (trans_date, balance) values (?, ?)";
            pst = conn.prepareStatement(sql);
            String trans_date=table_transaction.getValueAt(table_transaction.getRowCount()-1, 0).toString();
            //balance=table_transaction.getValueAt(table_transaction.getRowCount()-1, 3).toString();
            pst.setString(1, trans_date);
            pst.setString(2, cashOnHand);
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Suceesfully updated db");
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Transaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Transaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Transaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Transaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Transaction().setVisible(true);
            }
        });
         System.out.println("hello000000");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_cashOnHand;
    private javax.swing.JTable table_transaction;
    // End of variables declaration//GEN-END:variables
}
